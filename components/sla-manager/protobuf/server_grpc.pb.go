// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: protobuf/server.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLAsvcClient is the client API for SLAsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLAsvcClient interface {
	CreateSLA(ctx context.Context, in *InputSLAObj, opts ...grpc.CallOption) (*InputSLAObj, error)
	DeleteSLA(ctx context.Context, in *SLAId, opts ...grpc.CallOption) (*SLAObj, error)
	GetSLA(ctx context.Context, in *SLAId, opts ...grpc.CallOption) (*SLAObj, error)
}

type sLAsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSLAsvcClient(cc grpc.ClientConnInterface) SLAsvcClient {
	return &sLAsvcClient{cc}
}

func (c *sLAsvcClient) CreateSLA(ctx context.Context, in *InputSLAObj, opts ...grpc.CallOption) (*InputSLAObj, error) {
	out := new(InputSLAObj)
	err := c.cc.Invoke(ctx, "/protobuf.SLAsvc/CreateSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAsvcClient) DeleteSLA(ctx context.Context, in *SLAId, opts ...grpc.CallOption) (*SLAObj, error) {
	out := new(SLAObj)
	err := c.cc.Invoke(ctx, "/protobuf.SLAsvc/DeleteSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAsvcClient) GetSLA(ctx context.Context, in *SLAId, opts ...grpc.CallOption) (*SLAObj, error) {
	out := new(SLAObj)
	err := c.cc.Invoke(ctx, "/protobuf.SLAsvc/GetSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLAsvcServer is the server API for SLAsvc service.
// All implementations must embed UnimplementedSLAsvcServer
// for forward compatibility
type SLAsvcServer interface {
	CreateSLA(context.Context, *InputSLAObj) (*InputSLAObj, error)
	DeleteSLA(context.Context, *SLAId) (*SLAObj, error)
	GetSLA(context.Context, *SLAId) (*SLAObj, error)
	mustEmbedUnimplementedSLAsvcServer()
}

// UnimplementedSLAsvcServer must be embedded to have forward compatible implementations.
type UnimplementedSLAsvcServer struct {
}

func (UnimplementedSLAsvcServer) CreateSLA(context.Context, *InputSLAObj) (*InputSLAObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLA not implemented")
}
func (UnimplementedSLAsvcServer) DeleteSLA(context.Context, *SLAId) (*SLAObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLA not implemented")
}
func (UnimplementedSLAsvcServer) GetSLA(context.Context, *SLAId) (*SLAObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLA not implemented")
}
func (UnimplementedSLAsvcServer) mustEmbedUnimplementedSLAsvcServer() {}

// UnsafeSLAsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLAsvcServer will
// result in compilation errors.
type UnsafeSLAsvcServer interface {
	mustEmbedUnimplementedSLAsvcServer()
}

func RegisterSLAsvcServer(s grpc.ServiceRegistrar, srv SLAsvcServer) {
	s.RegisterService(&SLAsvc_ServiceDesc, srv)
}

func _SLAsvc_CreateSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputSLAObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAsvcServer).CreateSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SLAsvc/CreateSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAsvcServer).CreateSLA(ctx, req.(*InputSLAObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAsvc_DeleteSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLAId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAsvcServer).DeleteSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SLAsvc/DeleteSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAsvcServer).DeleteSLA(ctx, req.(*SLAId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAsvc_GetSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLAId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAsvcServer).GetSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SLAsvc/GetSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAsvcServer).GetSLA(ctx, req.(*SLAId))
	}
	return interceptor(ctx, in, info, handler)
}

// SLAsvc_ServiceDesc is the grpc.ServiceDesc for SLAsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLAsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SLAsvc",
	HandlerType: (*SLAsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSLA",
			Handler:    _SLAsvc_CreateSLA_Handler,
		},
		{
			MethodName: "DeleteSLA",
			Handler:    _SLAsvc_DeleteSLA_Handler,
		},
		{
			MethodName: "GetSLA",
			Handler:    _SLAsvc_GetSLA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/server.proto",
}
